#SQLite

1 строчка - import sqlite3 - импортируем библиотеку

db = sqlite.connect('**') - подключаем базу данных для работы в файле

c = db.cursor() - создаем курсор, с помощью которого будут работать 
    все остальные коды

db.commit() - сохраняет изменения
db.close() - обязательно закрываем БД, тут как с файлами

c.execute - нужна чтоб выполнить задачу

c.execute("""CREATE TABLE ** (
    title text,
    full_text text,
    views integer,
    avtor text
)""")

#создаем таблицу, и после в скобках пишем ее столбцы, а после названия столбца - тип данных в ней

c.execute("INSERT INTO articles VALUES ('Amazon is cool!', 'Amazon is really cool', 400, 'Modest')")

#добавление данных, ("вставить в <имя таблицы> значения (1), (2), (3), (4)")

c.execute("DELETE FROM articles WHERE avtor = 'Admin'")

#удаление данных (" удалить из <имя таблицы> то, где <условие> =, >, <, <> ** ")

c.execute("UPDATE articles SET avtor = 'Admin', views = 1 WHERE title = 'Amazon is cool!'")

#изменение данных, (" обновить <имя таблицы> поставить <столбец> = ** где <столбец> = '**' ")
    условия могут быть любыми, тут чисто пример

c.execute("SELECT rowid, * FROM articles WHERE rowid < 5 ORDER BY **")

# выборка для вывода данных, (" выбрать !порядковый номер!, *(значит из всех данных) из <имя таблицы> 
    где !порядковый номер! < 5, сортировка по возрастанию, при дописи DESC после ** сортировка инвертируется

c.fetchall() - выборка всего, либо же всего, что удовлетворяет условию
c.fetchmany() - выбирает определенное количество записей, по порядку rowid, возвращает список
c.fetchone() - выбирает одну запись, так же по rowid, возвращает кортеж

#Django

В терминале пишем py manage.py migrate, OK значит, что все успешно установлено